import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
churn_df = pd.read_csv("telecom_churn_clean.csv")
X = churn_df[["total_day_charge", "total_eve_charge"]].values
y = churn_df[["churn"]].values
print(X.shape,y.shape)
knn = KNeighborsClassifier(n_neighbors = 15)
knn.fit(X,y)
X_new = np.array([[56.8, 17.5],[24.4, 24.1], [50.1, 10.9]])
print(X_new.shape)
predicciones = knn.predict(X_new)
print('predictiones: {}'.format(predicciones))
X = churn_df[["account_length", "customer_service_calls"]].values
y = churn_df[["churn"]].values
knn = KNeighborsClassifier(n_neighbors=6)
knn.fit(X, y)
X_new = [[30.0, 17.5], [107.0, 24.1], [213.0, 10.9]]
y_pred = knn.predict(X_new)
print('predicciones: {}'.format(y_pred))
from sklearn.model_selection import train_test_split
X = churn_df[["total_day_charge", "total_eve_charge"]].values
y = churn_df[["churn"]].values
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3,
random_state = 21, stratify = y)
knn = KNeighborsClassifier(n_neighbors = 6)
knn.fit(X_train, y_train)
print(knn.score(X_test, y_test))
train_accuracies = {}
test_accuracies = {}
neighbors = np.arange(1,26)
for neighbor in neighbors:
knn = KNeighborsClassifier(n_neighbors = neighbor)
knn.fit(X_train, y_train)
train_accuracies[neighbor] = knn.score(X_train, y_train)
test_accuracies[neighbor] = knn.score(X_test, y_test)
import matplotlib.pyplot as plt
plt.figure(figsize = (8,6))
plt.title("KNN: NÃºmero variable de vecinos")
plt.plot(neighbors, train_accuracies.values(), label = "Training Accuracy")
plt.plot(neighbors, test_accuracies.values(), label = "Testing Accuracy")
plt.legend()
plt.xlabel("Numero de Vecinos")
plt.ylabel("Accuracy")
plt.show()
import pandas as pd
diabetes_df = pd.read_csv("diabetes_clean.csv")
print(diabetes_df.head())
X = diabetes_df.drop("glucose", axis = 1).values
y = diabetes_df["glucose"].values
print(type(X), type(y))
X_bmi = X[:, 4]
print(y.shape, X_bmi.shape)
X_bmi = X_bmi.reshape(-1,1)
print(X_bmi.shape)
import matplotlib.pyplot as plt
plt.scatter(X_bmi, y)
plt.ylabel("Glucosa en la sangre (mg/dl)")
plt.xlabel("Indice de masa corporal")
plt.show()
from sklearn.linear_model import LinearRegression
reg = LinearRegression()
reg.fit(X_bmi, y)
predicciones = reg.predict(X_bmi)
plt.scatter(X_bmi,y)
plt.plot(X_bmi, predicciones, color = "red")
plt.ylabel("Glucosa en la sangre (mg/dl)")
plt.xlabel("Indice de masa corporal")
plt.show()
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
# Dividimos los datos en Train y test
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=42)
# Instanciamos el modelo
reg_all = LinearRegression()
# Ajustamos el modelo en el conjunto de entrenamiento
reg_all.fit(X_train, y_train)
# Predecimos en el conjunto de prueba
y_pred = reg_all.predict(X_test)
reg_all.score(X_test, y_test)
from sklearn.metrics import mean_squared_error
import numpy as np
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
rmse
from sklearn.model_selection import cross_val_score, KFold
# KFold: nos permite establecer una semilla, de manera que nuestros resultado sean
#        repetibles.
kf =  KFold(n_splits = 6, shuffle = True, random_state = 42)
reg = LinearRegression()
cv_results = cross_val_score(reg, X, y, cv = kf)
print(cv_results)
print(np.mean(cv_results), np.std(cv_results))
print(np.quantile(cv_results, [0.025, 0.975]))
from sklearn.linear_model import Ridge
scores = []
for alpha in [0.1, 1.0, 10.0, 100.0, 1000.0]:
ridge = Ridge(alpha = alpha)
ridge.fit(X_train, y_train)
y_pred = ridge.predict(X_test)
scores.append(ridge.score(X_test, y_test))
print(scores)
from sklearn.linear_model import Lasso
scores = []
for alpha in [0.01, 1.0, 10.0, 20.0, 50.0]:
lasso = Lasso(alpha = alpha)
lasso.fit(X_train, y_train)
lasso_pred = lasso.predict(X_test)
scores.append(lasso.score(X_test, y_test))
print(scores)
from sklearn.linear_model import Lasso
from sklearn.linear_model import Lasso
X = diabetes_df.drop("glucose", axis = 1).values
y = diabetes_df["glucose"].values
names = diabetes_df.drop("glucose", axis = 1).columns
from sklearn.metrics import classification_report, confusion_matrix
knn = KNeighborsClassifier(n_neighbors = 7)
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.4,
random_state = 42)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(confusion_matrix(y_test, y_pred)
from sklearn.metrics import classification_report, confusion_matrix
knn = KNeighborsClassifier(n_neighbors = 7)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(confusion_matrix(y_test, y_pred))
from sklearn.metrics import classification_report, confusion_matrix
knn = KNeighborsClassifier(n_neighbors = 7)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(confusion_matrix(y_test, y_pred))
from sklearn.metrics import classification_report, confusion_matrix
knn = KNeighborsClassifier(n_neighbors = 7)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(confusion_matrix(y_test, y_pred))
from sklearn.metrics import classification_report, confusion_matrix
knn = KNeighborsClassifier(n_neighbors = 7)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(confusion_matrix(y_test, y_pred))
from sklearn.metrics import classification_report, confusion_matrix
knn = KNeighborsClassifier(n_neighbors = 7)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(confusion_matrix(y_test, y_pred))
import pandas as pd
diabetes_df = pd.read_csv("diabetes_clean.csv")
print(diabetes_df.head())
X = diabetes_df.drop("glucose", axis = 1).values
y = diabetes_df["glucose"].values
print(type(X), type(y))
from sklearn.metrics import classification_report, confusion_matrix
knn = KNeighborsClassifier(n_neighbors = 7)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(confusion_matrix(y_test, y_pred))
import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
churn_df = pd.read_csv("telecom_churn_clean.csv")
X = churn_df[["total_day_charge", "total_eve_charge"]].values
y = churn_df[["churn"]].values
print(X.shape,y.shape)
from sklearn.metrics import classification_report, confusion_matrix
knn = KNeighborsClassifier(n_neighbors = 7)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(confusion_matrix(y_test, y_pred))
import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
churn_df = pd.read_csv("telecom_churn_clean.csv")
X = churn_df[["total_day_charge", "total_eve_charge"]].values
y = churn_df[["churn"]].values
print(X.shape,y.shape)
knn = KNeighborsClassifier(n_neighbors = 15)
library(reticulate)
library(usethis)
reticulate::repl_python()
